{extends '../@bodyless.shtml'}

{block bodyPH}
    <body>
        <div class="ovk-msg-client">
            <header>
                <strong><a target="_parent" href="{$url}/?/user&id={$user->id}">{$user->first_name|truncate:17} {$user->last_name|truncate:17}</a></strong>
            </header>
            <main>
                <div class="msg-container" data-bind="foreach: messages">
                     <div class="message row">
                         <div class="ava span1">
                            <img
                                data-bind="attr: { src: owner.ava }"
                                alt="Фотография"
                                class="ava span1"
                                />
                         </div>
                         <div class="span4">
                              <a target="_parent" href="#" data-bind="attr: { href: owner.link }"><strong data-bind="text: owner.name">Отправитель сообщения</strong></a>
                              <p data-bind="text: content">...</p>
                         </div>
                     </div>
                </div>
                <div>
                    <div>
                        <div>
                            <div class="wall-new-author">
                                <img src="{$url}/cdn/{getAvUrl($logged_user->id)|noescape}" alt="Ваша фотография" class="ava" />
                            </div>
                            <div class="wall-new-post">
                                <input type="hidden" name="attachments" id="attachments"/>
                                <textarea data-bind="value: messageContent" placeholder="Пиши, {$logged_user->first_name}"></textarea>
                                {$csrf_protection|noescape}
                            </div>
                        </div>
                        <br/>
                        <button class="btn" data-controls-modal="attachmentModal" data-backdrop="static" data-keyboard="true" id="attachment-button" disabled><i class="fas fa-paperclip"></i></button>
                        <button class="btn primary" style="float:right;" data-bind="click: sendMessage"><i class="fas fa-pen-fancy"></i> Написать</button>
                    </div>
                </div>
            </main>
        </div>
        <script>
            window.msgPeer = [ {$user->id} ];
        
            function MessengerViewModel(initialMessages = [])  {
                window.messages     = ko.observableArray(initialMessages);
                this.messages       = window.messages;
                this.messageContent = ko.observable("");
                
                this.sendMessage    = model => {
                    window.Msg.sendMessage(model.messageContent());
                    
                    model.messageContent("");
                };
            }
            
            class Messenger {
                constructor(messages = []) {
                    this.ko = ko.applyBindings(new MessengerViewModel(messages));
                }
                
                appendMessages(messages) {
                    messages.forEach(m => window.messages.push(m));
                }
                
                prependMessages(messages) {
                    messages.forEach(m => window.messages.unshift(m));
                }
                
                addMessage(message, scroll = true) {
                    this.appendMessages([message]);
                    
                    if(scroll) {
                        $(".msg-container").animate({
                            scrollTop: $(".msg-container")[0].scrollHeight
                        }, 100);
                    }
                }
                
                _newSelfMessage(content = "...") {
                    return {
                        owner: {
                            id:   {$logged_user->id},
                            link: {$url} + "/?/user&id=" + {$logged_user->id},
                            ava:  {$url} + "/cdn/" + {getAvUrl($logged_user->id, 0)},
                            name: {$logged_user->first_name} + " " + {$logged_user->last_name}
                        },
                        content: content
                    };
                }
                
                _newReplyMessage(content = "...") {
                    return {
                        owner: {
                            id:   {$user->id},
                            link: {$url} + "/?/user&id=" + {$user->id},
                            ava:  {$url} + "/cdn/" + {getAvUrl($user->id, 0)},
                            name: {$user->first_name} + " " + {$user->last_name}
                        },
                        content: content
                    };
                }
                
                newMessage(content) {
                    this.addMessage(this._newSelfMessage(content));
                }
                
                newReply(content) {
                    this.addMessage(this._newReplyMessage(content));
                }
                
                newReplies(replies) {
                    replies.forEach(this.newReply);
                }
                
                sendMessage(content) {
                    let xhr = new XMLHttpRequest();
                    xhr.open("POST", {$url} + "/?/im&act=write", false);
                    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    xhr.send(`to=${ {$user->id} }&content=${ window.encodeURIComponent(content) }&__csrf=${ $("input[name=__csrf]").val() }`);
                    $("input[name=__csrf]").val(xhr.responseText);
                    
                    this.newMessage(content);
                }
            }
            
            let initialMessageArray = {json_encode($messages)};
            initialMessageArray     = JSON.parse(initialMessageArray);
            window.Msg              = new Messenger(initialMessageArray);
            
            $(window).bind("message", e => {
                e = JSON.parse(new TextDecoder().decode(new Uint8Array(e.originalEvent.data)));
                
                if(e.code !== 100) return; //100 => new message
                if(e.from !== {$user->id}) return;
                
                window.Msg.newReply(e.text_full);
            });
            
            $(".msg-container").animate({
                scrollTop: $(".msg-container")[0].scrollHeight
            }, 100);
        </script>
        <script>
            const longpool = undefined; //prevent longpooling here
        </script>
    </body>
{/block}
 
